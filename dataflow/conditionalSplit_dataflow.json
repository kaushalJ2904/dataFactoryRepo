{
	"name": "conditionalSplit_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "logdata_Parquet",
						"type": "DatasetReference"
					},
					"name": "conditionalSplitParquetStream"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pool_db_parquet_dataset",
						"type": "DatasetReference"
					},
					"name": "conditionalSplitSink"
				}
			],
			"transformations": [
				{
					"name": "splitIncomingStream"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as string,",
				"          Correlationid as string,",
				"          Operationname as string,",
				"          Status as string,",
				"          Eventcategory as string,",
				"          Level as string,",
				"          Time as string,",
				"          Subscription as string,",
				"          Eventinitiatedby as string,",
				"          Resourcetype as string,",
				"          Resourcegroup as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> conditionalSplitParquetStream",
				"conditionalSplitParquetStream split({Resourcegroup} == 'app-grp',",
				"     disjoint: false) ~> splitIncomingStream@(appgrpStream, OtherRGs)",
				"splitIncomingStream@appgrpStream sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Correlationid as string,",
				"          Operationname as string,",
				"          Status as string,",
				"          Eventcategory as string,",
				"          Level as string,",
				"          Time as timestamp,",
				"          Subscription as string,",
				"          Eventinitiatedby as string,",
				"          Resourcetype as string,",
				"          Resourcegroup as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> conditionalSplitSink"
			]
		}
	}
}